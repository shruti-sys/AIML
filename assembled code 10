from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split
from sklearn.ensemble import VotingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import SVC
from sklearn.neighbors import KNeighborsClassifier

# Load the Iris dataset as an example
data = load_iris()
X = data.data
y = data.target

# Split the data into a training and testing set
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Define the individual classifiers
rf_classifier = RandomForestClassifier(n_estimators=100, random_state=42)
svm_classifier = SVC(kernel='linear', C=1, probability=True)
knn_classifier = KNeighborsClassifier(n_neighbors=3)

# Create an ensemble model using VotingClassifier
ensemble_model = VotingClassifier(
    estimators=[('rf', rf_classifier), ('svm', svm_classifier), ('knn', knn_classifier)],
    voting='soft'  # 'soft' for probability-based voting, 'hard' for majority voting
)

# Fit the ensemble model on the training data
ensemble_model.fit(X_train, y_train)

# Make predictions using the ensemble model
y_pred = ensemble_model.predict(X_test)

# Evaluate the ensemble model
from sklearn.metrics import accuracy_score
accuracy = accuracy_score(y_test, y_pred)
print(f"Ensemble Model Accuracy: {accuracy:.2f}")
